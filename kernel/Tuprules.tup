# Commands

ifeq (@(TARGET_ARCH),amd64)
	ASM_EXEC=x86_64-elf-gcc
	CC_EXEC=x86_64-elf-gcc
	ARCHIVER=x86_64-elf-ar
	LINKER=x86_64-elf-gcc
	OBJCOPY=x86_64-elf-objcopy
else
ifeq (@(TARGET_ARCH),i386)
	ASM_EXEC=i686-elf-gcc
	CC_EXEC=i686-elf-gcc
	ARCHIVER=i686-elf-ar
	LINKER=i686-elf-gcc
	OBJCOPY=i686-elf-objcopy
else
ifeq (@(TARGET_ARCH),rpi2)
	ASM_EXEC=arm-none-eabi-gcc
	CC_EXEC=arm-none-eabi-gcc
	ARCHIVER=arm-none-eabi-ar
	LINKER=arm-none-eabi-gcc
	OBJCOPY=arm-none-eabi-objcopy
endif
endif
endif

# Flags

CC_FLAGS=$(CC_FLAGS) -DP_NAME_DECORATIVE=\"$(P_NAME_DECORATIVE)\" -DP_VERSION_DECORATIVE=\"$(P_VERSION_DECORATIVE)\"
CC_FLAGS=$(CC_FLAGS) -DARCH_FAMILY_$(TARGET_FAMILY)
CC_FLAGS=$(CC_FLAGS) -std=gnu11 -Wall -Wextra -pedantic -O3 -fpic -ffreestanding -fno-exceptions -nostdlib -g

OBJECTS=$(OBJECTS) common/*.o

LINK_FLAGS=$(LINK_FLAGS) -lgcc

ifeq (@(TARGET_ARCH),amd64)
	CC_FLAGS=$(CC_FLAGS) -DARCH_amd64
	CC_FLAGS=$(CC_FLAGS) -mcmodel=large -mno-red-zone -mno-mmx -mno-sse -mno-sse2 -z max-page-size=4096

	OBJECTS=$(OBJECTS) x86/*.o x86/amd64/*.o

	LINK_FLAGS=$(LINK_FLAGS)
	LINK_SCRIPT=x86/linker.ld
else
ifeq (@(TARGET_ARCH),i386)
	CC_FLAGS=$(CC_FLAGS) -DARCH_i386

	OBJECTS=$(OBJECTS) x86/*.o x86/i386/*.o

	LINK_FLAGS=$(LINK_FLAGS)
	LINK_SCRIPT=x86/linker.ld
else
ifeq (@(TARGET_ARCH),rpi2)
	CC_FLAGS=$(CC_FLAGS) -DARCH_rpi2
	CC_FLAGS=$(CC_FLAGS) -mcpu=arm1176jzf-s

	OBJECTS=$(OBJECTS) arm/*.o arm/rpi2/*.o

	LINK_FLAGS=$(LINK_FLAGS)
	LINK_SCRIPT=arm/rpi2/linker.ld
endif
endif
endif

# Compilation commands

!ASM      = |> $(ASM_EXEC) $(CC_FLAGS) -o %o -c %f                            |> %B.o
!CC       = |> $(CC_EXEC) $(CC_FLAGS) $(INCLUDES) -o %o -c %f                 |> %B.o
!LINKER   = |> $(LINKER) $(CC_FLAGS) -T $(LINK_SCRIPT) $(LINK_FLAGS) -o %o %f |> %B
!ARCHIVER = |> $(ARCHIVER) rcs %o %f                                          |> %B.a
!OBJCOPY  = |> $(OBJCOPY) $(OBJCOPY_FLAGS) %f %o                              |> %B.o
